diff <- function(x, y) {
return(x - y)
}
diff(5, 3)
root_diff <- function(x, y) {
return(sqrt(x - y))
}
root_diff(20, 10)
round(root_diff(20, 10), 4)
round(root_diff(20, 10), 2)
square <- function(x){
return(x * x)
}
square(4)
square(1:4)
diff <- function(x, y){
return(x - y)
}
diff(5, 3)
root_diff <- function(x, y){
return(sqrt(x - y))
}
root_diff(20, 10)
round(root_diff(20, 10), 2)
for(i in 1:10){
if (i %% 3 == 1){
next()
}
print(i)
}
for(i in 1:10){
if (i %% 3 == 1){
next()
}
print(i)
}
for (i in 1:10){
if (i %% 3 == 1){
next()
}
print(i)
}
for (i in 1:10) {
i <- i + 1
print(i)
if i > 5 {
break
}
}
if (i > 5) {
break
}
for (i in 1:10) {
i <- i + 1
print(i)
if (i > 5) {
break
}
}
y <- 0
while(y < 5) {
print(y < y + 1)
}
y = 0
y <- 0
while(y < 5) {
print(y <- y + 1)
}
diff(100, 25)
root_diff(100, 25)
brain <- read.csv("brain2210.csv")
getwd()
brain <- read.csv("C:\Users\Brian\Desktop\Data Science\R\POSTECH_MOOC_R_basic\week3_1\brain2210.csv")
brain <- read.csv("C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_1/brain2210.csv")
brain
head(brain)
tail(brain)
dim(brain)
car <- read.table(file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_1/auotompg.txt", na = "", header = T)
car <- read.table(file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_1/autompg.txt", na = "", header = T)
car
head(car)
tail(car)
dim(car)
View(car)
table(brain$sex)
attach(brain)
table(Sex)
table(sex)
hist(wt)
detach(brain)
attach(brain)
brainf <- subset(brain, sex = 'f')
brainf
mean(wt)
mean(brainf$wt)
brain1300 <- subset(brain, brain$wt < 1300)
summary(brain1300)
brainm <- subset(brain, sex = 'm')
brainm
brainm <- subset(brain, sex = "m")
brainm
brainf <- subset(brain, sex == 'f')
brainf
mean(brainf$wt)
brain1300 <- subset(brain, brain$wt < 1300)
summary(brain1300)
mean(brainf$wt)
brain1300 <- subset(brain, brain$wt < 1300)
summary(brain1300)
brainm <- subset(brain, sex == "m")
brainm
mean(brainm$wt)
sd(brainf$wt)
sd(brainm$wt)
mean(brainf$wt)
sd(brainf$wt)
mean(brainm$wt)
sd(brainm$wt)
aggregate(wt ~ sex, data = brain, FUN = mean)
aggregate(wt ~ sex, data = brain, FUN = sd)
par(mfrow = c(2, 2))
hist(brainf$wt, breaks = 12, col = 'green', cex = 0.5)
hist(brainf$wt, breaks = 12, col = 'green', cex = 0.7)
hist(brainf$wt, breaks = 12,col = "green", cex = 0.7, main = "Histogram (Female)", xlab = "brain weight")
hist(brainm, breaks = 12, col = 'orange', cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainm, breaks = 12, col = "orange", cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainm$wt, breaks = 12,col = "orange", main="Histogram with (Male)" ,  xlab="brain weight")
hist(brainm$wt, breaks = 12, col = "orange", cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainm$wt, breaks = 12, col = "orange", cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainf$wt, breaks = 12,col = "green", cex = 0.7, main = "Histogram (Female)", xlab = "brain weight")
hist(brainm$wt, breaks = 12, col = "orange", cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainf$wt, breaks = 12,col = "green", cex = 0.7, main = "Histogram (Female)", xlab = "brain weight")
hist(brainm$wt, breaks = 12, col = "orange", cex = 0.7, main = "Histogram (Male)", xlab = "brain weight")
hist(brainf$wt, breaks = 12,col = "green", cex = 0.7, xlim = c(900, 1700), ylim = c(0, 25),
main = "Histogram (Female)", xlab = "brain weight")
hist(brainm$wt, breaks = 12, col = "orange", cex = 0.7, xlim = c(900, 1700), ylim = c(0, 25),
main = "Histogram (Male)", xlab = "brain weight")
write.table(brainf, file = "brainf.csv", row.names = F, sep = ",", na = " ")
write.table(brainf, file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_1/brainf.csv", row.names = F, sep = ",", na = " ")
write.table(brainf, file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_2/brainf.csv", row.names = F, sep = ",", na = " ")
write.table(brainm, file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_2/brainm.txt", rownames = F, na = " ")
write.table(brainm, file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_2/brainm.txt", row.names = F, na = " ")
write.table(brainf, file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_2/brainf2.csv", row.names = T, sep = ",", na = " ")
brain1000 <- subset(brain, brain$wt < 1000)
brain1000
head(brain1000
head(brain1000)
brain1000 <- subset(brain, brain$wt < 1000)
head(brain1000)
table(brain1000)
table(brain1000$sex)
par(mfrow = c(1, 1))
head(car)
dim()
dim(car)
str(car)
summary(car)
is.factor(car$carname)
attach(car)
attach(car)
table(year)
table(origin)
mean(mpg)
mean(hp)
mean(wt)
apply(car[, 1:6], 2, mean)
freq_cyl <- table(cyl)
freq_cy1 <- table(cy1)
names(freq_cy1)
names(freq_cy1) <- c("3cy1", "4cy1", "5cy1", "6cy1", "8cy1")
freq_cy1 <- table(cy1)
names(freq_cy1) <- c("3cy1", "4cy1", "5cy1", "6cy1", "8cy1")
freq_cyl <- table(cyl)
names(freq_cyl) <- c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl")
barplot(freq_cyl)
barplot(freq_cyl, main = "Cylinders Distribution")
hist(mpg, main = "Mile per gallon: 1970-1982")
hist(mpg, main = "Mile per gallon: 1970-1982", col = "lightblue")
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(wt, hp, mpg, type = "h", highlight.3d = TRUE,
angle = 55, scale.y = 0.7, pch = 16, main = "3dimensional plot for autompg data")
lapply(car[, 1:6], mean)
lapply(car[, 1:6], mean)
a1 <- lapply(car[, 1:6], mean)
a2 <- lapply(car[, 1:6], sd)
a3 <- lapply(car[, 1:6], min)
a4 <- lapply(car[, 1:6], max)
table1 <- cbind(a1, a2, a3, a4)
colnames(table1) <- c("mean", "sd", "min", "max")
table1
install.packages("readxl")
library(readxl)
mtcars1 <- read_excel("C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_4/mtcarsb (3-4).xlsx", sheet = "mtcars")
head(mtcars1)
brain <- read_excel("C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_4/mtcarsb (3-4).xlsx", sheet = 2)
head(brain)
install.packages("foreign")
library(foreign)
install.packages("sas7bdat")
library(sas7bdat)
b1 <- read.sas7bdat("C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_4/brain.sas7bdat")
b1
head(b1)
install.packages("RODBC")
library(RODBC)
install.packages(c("readxl", "RODBC", "sas7bdat"))
connStr <- paste(
"Server=msedxeus.database.windows.net",
"Database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
"Driver={SQL Server}",
sep=";"
)
connStr <- paste(
"Server=msedxeus.database.windows.net",
"Database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
"Driver={SQL Server}",
sep=";"
)
conn <- odbcDriverConnect(connStr)
tab <- sqlTables(conn)
head(tab)
mf <- sqlFetch(conn,"bi.manufacturer")
mf
close(conn)
library(foreign)
install.packages("rmarkdown")
install.packages("knitr")
brain <- read.csv(file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_4/brain2210.csv")
brain <- read.csv(file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week3_4/brain2210.csv")
brain <- read.csv(file = "C:/Users/Brian/Desktop/Data Science/R/POSTECH_MOOC_R_basic/week4_1/brain2210.csv")
head(brain)
dim(brain)
attach(brain)
hist(wt)
hist(wt, col = "ligthblue")
hist(wt, col = "lightblue")
hist(wt, col = "lightgreen")
help(hist)
hist(wt, col = "lightgreen", main = "Histogram of Brain weight")
hist(wt, col = "rainbow", main = "Histogram of Brain weight")
hist(wt, col = "red", main = "Histogram of Brain weight")
hist(wt, col = "blue", main = "Histogram of Brain weight")
hist(wt, breaks = 5, col = "blue", main = "Histogram of Brain weight")
hist(wt, breaks = 10, col = "blue", main = "Histogram of Brain weight")
colors()
grep("blue", colors(), value = T)
hist(wt, breaks = 10, col = "steelblue", main = "Histogram of Brain weight")
d <- density(brain$wt)
plot(d)
d
plot(d)
par(mfrow = c(2, 1))
brainf <- subset(brain, brain$sex == 'f')
brainm <- subset(brain, brain$sex == 'm')
hist(brainf$wt, breaks = 12, col = "steelgreen", xlim = c(900, 1700), ylim = c(0, 20))
hist(brainf$wt, breaks = 12, col = "green", xlim = c(900, 1700), ylim = c(0, 20))
hist(brainm$wt, breaks = 12, col = "steelblue", xlim = c(900, 1700), ylim = c(0, 20))
hist(brainf$wt, breaks = 12, col = "green", xlim = c(900, 1700), ylim = c(0, 20))
hist(brainf$wt, breaks = 12, col = "green", xlim = c(900, 1700), ylim = c(0, 20))
hist(brainm$wt, breaks = 12, col = "steelblue", xlim = c(900, 1700), ylim = c(0, 20))
grep("violet", colors(), value = T)
boxplot(brain$wt, col = c("coral"))
par(mfrow = c(1, 2))
boxplot(brain$wt, col = c("coral"))
boxplot(brain$wt ~ brain$sex, col = c("green", "orange"))
boxplot(brain$wt ~ brain$sex, col = c("violet", "orange"))
par(mfrow = c(1, 2))
boxplot(brain$wt, col = c("coral"))
boxplot(brain$wt ~ brain$sex, col = c("violet", "orange"))
par(mfrow = c(1, 1))
boxplot(brain$wt ~ brain$sex, boxwex = 0.5, horizontal = T, col = c("lightblue", "yellow"))
boxplot(brain$wt ~ brain$sex, boxwex = 0.25, horizontal = T, col = c("lightblue", "yellow"))
boxplot(brain$wt ~ brain$sex, horizontal = T, col = c("lightblue", "yellow"))
boxplot(brain$wt ~ brain$sex, boxwex = 0.5, horizontal = T, col = c("lightblue", "yellow"))
text(c(1:nlevels(brain$sex), a$stats(nrow(a$stats),) + 30, paste("n = ~, table(brain$sex"), sep = ""))
text(c(1:nlevels(brain$sex)), a$stats[nrow(a$stats),] + 30, paste("n = ", table(brain$sex), sep = ""))
boxplot(brain$wt ~ brain$sex, boxwex = 0.5, col = c("lightblue", "yellow"))
text(c(1:nlevels(brain$sex)), a$stats[nrow(a$stats),] + 30, paste("n = ", table(brain$sex), sep = ""))
a <- boxplot(brain$wt ~ brain$sex, boxwex = 0.5, col = c("lightblue", "yellow"))
text(c(1:nlevels(brain$sex)), a$stats[nrow(a$stats),] + 30, paste("n = ", table(brain$sex), sep = ""))
par(mfrow=c(1,2))
a<-boxplot(brain$wt~brain$sex, col = c("green", "orange"))
text(c(1:nlevels(brain$sex)), a$stats[nrow(a$stats),]+30, paste("n = ",table(brain$sex),sep=""))
brainf<-subset(brain,brain$sex=='f')
brainm<-subset(brain,brain$sex=='m')
sdout<-cbind(sd(brainf$wt),sd(brainm$wt))
b<-boxplot(brain$wt~brain$sex, col = c("green", "orange"))
text(c(1:nlevels(brain$sex)), b$stats[nrow(b$stats),]+30, cex=0.8, paste("sd = ",round(sdout, 2),sep="")  )
par(mfrow = c(1, 1))
table(car$cyl)
freq_cyl <- table(cyl)
attach(Car)
attach(car)
table(car$cyl)
freq_cyl <- table(cyl)
names(freq_cyl) <- c ("3cyl", "4cyl", "5cyl", "6cyl",
"8cyl")
barplot(freq_cyl, col = c("lightblue", "mistyrose", "lightcyan",
"lavender", "cornsilk"))
pie(freq_cyl)
pie(freq_cyl, labels = c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl"))
pie(freq_cyl, labels = c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl"), clockwise = T)
car1 <- subset(car, cyl == 4 | cyl == 6 | cyl == 8)
table(car1$cyl)
pie(car1)
freq_cyl1 <- table(car1$cyl)
pie(freq_cyl1)
pie(freq_cyl1, labels = c("4cyl","6cyl","8cyl"), clockwise = T)
par(mfrow = c(1, 1))
plot(wt, mpg)
plot(hp, mpg)
plot(wt, mpg, col = as.integer(car$cyl))
plot(disp, mpg, col = as.integer(Car$cyl))
plot(disp, mpg, col = as.integer(car$cyl))
coplot(car1$mpg ~ car1$disp | as.factor(car1$cyl), data = car1, panel = panel.smooth, rows = 1)
pairs(car1[, 1:6], col = as.integer(car1$cyl), main = "autompg")
plot(wt, mpg, col = as.integer(car$cyl), pch = 19)
abline(lm(mpg ~ wt), col = "red", lwd = 2, lty = 1)
lines(lowess(wt, mpg), col = "blue", lwd = 3, lty = 2)
plot(wt, mpg)
abline(h = 20)
abline(h = 30)
abline(v = 3000, col = "blue")
abline(a = 40, b = -0.0076, col = "red")
z <- lm(mpg ~ wt, data = car)
z
abline(z, lty = 2, lwd = 2, col = "green")
m <- matrix(c(1, 1, 2, 3), ncol = 2, byrow = T)
layout(mat = m)
m
plot(wt, mpg, pch = 19, col = 4)
hist(wt)
hist(mpg)
labels <- c ("3cyl", "4cyl", "5cyl", "6cyl", "8cyl")
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
par(mfrow = c(1, 1))
plot(wt, mpg, col = as.integer(car$cyl))
labels <- c ("3cyl", "4cyl", "5cyl", "6cyl", "8cyl")
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
legend(4500, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
legend(400, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
par(mfrow = c(1, 1))
plot(wt, mpg, col = as.integer(car$cyl))
labels <- c ("3cyl", "4cyl", "5cyl", "6cyl", "8cyl")
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8))
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8), lty = 2)
legend(4000, 45, legend = labels, pch = 1, col = c(3, 4, 5, 6, 8), lty = 1)
# R practice
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# R practice
install.packages("reshape2")
library(reshae2)
library(reshape2)
head(french_fries)
help(melt)
install.packages("plyr")
m <- melt(french_fries, id.vars = 1:4)
head(m)
tail(m)
library(dplyr)
ddply(m, .(variable), summarise, mean = mean(value, na.rm = T))
library(dplyr)
library(plyr)
library(plyr)
library(dplyr)
ddply(m, .(variable), summarise, mean = mean(value, na.rm = T))
# complete.cases()
french_fries[!complete.cases(french_fries),]
# NA를 포함하는 측정치를 melt() 시 제외하려면, na.rm = T로 지정
m <- melt(id = 1:4, french_fries, na.rm = T)
head(m)
# 2. dcast()
m <- melt(french_fries, id.vars = 1:4)
# 2. dcast()
m <- melt(french_fries, id.vars = 1:4)
r <- dcast(m, time + treatment + subject + rep ~ ...)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
# dcast() --> 데이터의 요약 값을 계산하는 기능
m <- melt(french_fries, id.vars = 1:4)
dcast(m, time ~ variable)
dcast(m, time + treatment ~ variable)
dcast(m, time ~ variable, mean, na.rm = T)
dcast(m, time ~ treatment + variable, mean, na.rm = T)
return(mean(rows$value, na.rm = T))
ddply(m, .(time, treatment, variable), function(rows) {
return(mean(rows$value, na.rm = T))
})
install.packages("data.table")
library(data.table)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
tables()
# data.table --> 데이터를 접근할 때 사용하는 []에는 몇 가지 주의가 필요하다
DT <- as.data.table(iris)
head(iris)
iris[1, 1]
DT[1, 1]
DT[1, 1, with = F]
DT[1, 1, with = T]
head(iris)
iris[1, 1]
DT[1, 1]
DT[1, 1, with = F]
DT[1, 1, with = T]
iris[1, c("Sepal.Length")]
DT[1, c("Sepal.Length")]
DT[1, c("Sepal.Length"), with = F]
iris[, mean(Sepal.Length), by = "Species"]
DT[, mean(Sepal.Length), by = "Species"]
install.packages("koNLP")
# paste()와 paste0()
paste("A", 1:6, sep = "")
paste0("A", 1:6)
# paste()와 paste0()
paste("A", 1:6)
# R practice
# install.packages("reshape2")
library(reshape2)
head(french_fries)
# 1. melt()
m <- melt(french_fries, id.vars = 1:4)
head(m)
# R practice
# install.packages("reshape2")
library(reshape2)
head(french_fries)
# 1. melt()
m <- melt(french_fries, id.vars = 1:4)
head(m)
tail(m)
# 측정 변수가 variable이라는 컬럼에 값으로 저장되어
# variable마다 그룹 지어 통계치를 계산하는 작업이 간단해진다
library(plyr)
ddply(m, .(variable), summarise, mean = mean(value, na.rm = T))
# 2. dcast()
m <- melt(french_fries, id.vars = 1:4)
r <- dcast(m, time + treatment + subject + rep ~ ...)
rownames(r) <- NULL
rownames(french_fries) <- NULL
identical(r, french_fries)
r
# dcast() --> 데이터의 요약 값을 계산하는 기능
m <- melt(french_fries, id.vars = 1:4)
dcast(m, time ~ variable)
dcast(m, time ~ variable, mean, na.rm = T)
dcast(m, time ~ treatment + variable, mean, na.rm = T)
ddply(m, .(time, treatment, variable), function(rows) {
return(mean(rows$value, na.rm = T))
})
# install.packages("data.table")
library(data.table)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
tables()
# install.packages("data.table")
library(data.table)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
tables(x)
tables()
iris_table <- as.data.table(iris)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
tables()
# install.packages("data.table")
library(data.table)
iris_table <- as.data.table(iris)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
tables()
# install.packages("data.table")
library(data.table)
iris_table <- as.data.table(iris)
# install.packages("data.table")
library(data.table)
x <- data.table(x = c(1, 2, 3), y = c("a", "b", "c"))
x
DT <- as.data.table(iris)
head(iris)
head(DT)
iris[1, 1]
DT[1, 1]
iris[1, c("Sepal.Length")]
DT[1, c("Sepal.Length")]
DT[, mean(Sepal.Length), by = "Species"]
DT[1,]
DT[DT$Species == "setosa",]
DT[1, Sepal.Length]
DT[1, list(Sepal.Length, Species)]
DT[, mean(Sepal.Length), by = "Species"]
# paste()와 paste0()
paste("A", 1:6)
paste("A", 1:6, sep = "")
# paste()와 paste0() 함수
paste("A", 1:6)
paste("A", 1:6, sep = "")
paste0("A", 1:6)
